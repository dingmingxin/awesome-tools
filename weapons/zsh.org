* 简介
1. 家族: *nix
2. 出生: 1990s
3. wikipedia: https://en.wikipedia.org/wiki/Z_shell
* zsh vs bash : 特点及优势
bash是大多数linux发行版的默认shell环境，是最通用、最流行的shell

大多数用过bash的同学肯定有同感，bash的自动提示功能太弱了，即使有了bash-completion,
补全功能也很有限，下面我总结了一下zsh优于bash的一些特点:

1. 强大的补全功能
   1. cd补全
   2. 命令选项补全
   3. path completion and expansion
   4. git completion
   5. 其他各种好用的补全提示
2. 错误检查自动更正
3. 命令行右提示
4. 自定义命令
   1. normal alias like bash
   2. global alias
   3. 前缀替换
5. 可编程式文件批量重命名 : zmv
6. zsh-history-substring-search
7. 功能强大的开源库：[[https://github.com/robbyrussell/oh-my-zsh][oh-my-zsh]]
* 具体特点详述
zsh特性繁多，在此我只简单介绍一两个我熟悉并且经常使用的特性
** 自动补全
*** cd 自动补全
**** 路径缩写补全
#+begin_src sh
  cd /d/w/t/0 
  # 相当于下面这行
  cd /data/work/test/01
#+end_src
**** 路径替换
同一路径的子目录
#+begin_src sh
  cd /usr/local/bin && cd bin share 
  # 相当于下面这行
  cd /usr/local/bin && cd ../share
#+end_src

同一路径的中间子目录替换
#+begin_src sh
 cd /data/www/site1/apps/common/logic/test && cd site1 site2 
 #相当于
 cd /data/www/site1/apps/common/logic/test && cd ../../../../site2/apps/common/logic/test
#+end_src 
*** 命令选项补全
Examples:

#+begin_src sh
  ls -s <TAB>
#+end_src

[[https://raw.githubusercontent.com/dingmingxin/awesome-tools/master/pics/gif_zsh_ls.gif][https://raw.githubusercontent.com/dingmingxin/awesome-tools/master/pics/gif_zsh_ls.gif]]
** zsh-history-substring-search
相比bash中的Ctrl-R，这个插件很好用

启用: 在~/.zshrc中添加: plugins=(history-substring-searc h)

[[https://raw.githubusercontent.com/dingmingxin/awesome-tools/master/pics/gif_zsh_history_sub_search.gif][https://raw.githubusercontent.com/dingmingxin/awesome-tools/master/pics/gif_zsh_history_sub_search.gif]]

*** 结合fzf更好用(Ctrl-R binding with fzf functions)

安装fzf过程中提示"是否绑定快捷键"，选择是，这样，Ctrl-R 就被绑定到一个基于fzf的函数，代替了原来的zsh Ctrl-R
(严格来说，这不是zsh提供的特性，暂且就放在这里吧)

[[https://raw.githubusercontent.com/dingmingxin/awesome-tools/master/pics/gif_zsh_fzf_ctrl_r.gif][https://raw.githubusercontent.com/dingmingxin/awesome-tools/master/pics/gif_zsh_fzf_ctrl_r.gif]]
** 提示主题
zsh自身对终端提示有很好的支持接口，并且自带了对版本控制工具的信息接口
比如可以获取当前git 库的分支、当前分支是否是clean，都可以获得
* oh-my-zsh
zsh在开源社区，有个很著名的仓库: [[https://github.com/robbyrussell/oh-my-zsh][oh-my-zsh]]
** Install
#+begin_src sh
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
#+end_src

或者：

#+begin_src sh
  sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"
#+end_src
** 简介
oh-my-zsh 安装完成后，会有~/.zshrc ~/.oh-my-zsh
所有的插件、命令alias、主题等都在 ~/.oh-my-zsh

~/.oh-my-zsh :
1. /custom : 用于用户自定义的内容
2. /plugin : oh-my-zsh 自带的插件
3. /themes : 主题

主题就是shell 的prompt 提示，zsh比其他shell多出来一个右提示，
提示的可定制性也很强

主题、使用哪些插件、自定义插件，都可以在 oh-my-zsh 安装完之后带的~/.zshrc 里进行配置
* 我的zsh配置
有现成的轮子，就不必费劲自己再去创造，暂且用拿来主义来伪装自己吧。
我自己维护了一份基于zsh的配置
dotfiles: 
** 安装
1. Download release package : [[https://github.com/dingmingxin/dotfiles/releases/tag/v0.1.0][dmx-dotfiles v1]] 
2. Extract and Install

#+begin_src sh
  cp -r dmxdotfiles ~/dotfiles
  cd ~/dotfiles
  ./deploy zsh
#+end_src

** 配置文件介绍
*** ~/.zsh_alias.zsh
全局的alias
*** ~/.zsh_custom
存放一些自定义的配置，和zsh自定义的插件
*** ~/.zsh_env.zsh
环境变量在这个目录
*** ~/.zshrc
zsh的配置文件
*** ~/.zprofile
** 文件引用顺序
在我的配置下，zsh启动时依次会source:
1. ~/.zprofile
2. ~/.zshrc

我在~/.zshrc里手动source了~/.zsh_env.zsh 和 ~/.zsh_custom 下的一些文件

注意，除了~/.zshrc ~/.zprofile, 其他的都是我自定义的，非zsh标准文件
